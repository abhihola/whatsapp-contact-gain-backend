// package.json - Project dependencies
{
  "name": "whatsapp-contact-gain-backend",
  "version": "1.0.0",
  "description": "Backend for WhatsApp Contact Gain",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^6.3.3",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "nodemailer": "^6.9.1",
    "node-cron": "^3.0.0"
  }
}

// server.js - Main backend setup
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const cron = require('node-cron');
require('dotenv').config();

const userRoutes = require('./routes/userRoutes');
const adminRoutes = require('./routes/adminRoutes');
const { sendDailyEmails } = require('./utils/emailSender');

const app = express();
app.use(express.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.error('MongoDB connection error:', err));

// Routes
app.use('/api/users', userRoutes);
app.use('/api/admin', adminRoutes);

// Schedule daily email sending
cron.schedule('0 8 * * *', async () => {
  console.log('Sending daily VCF emails...');
  await sendDailyEmails();
}, {
  timezone: "UTC"
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));


// routes/userRoutes.js - User API routes
const express = require('express');
const router = express.Router();
const User = require('../models/User');

// Add user
router.post('/add', async (req, res) => {
  try {
    const { name, whatsappNumber, email } = req.body;
    const user = new User({ name, whatsappNumber, email });
    await user.save();
    res.status(201).json({ message: 'User added successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Get all users
router.get('/', async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

module.exports = router;


// routes/adminRoutes.js - Admin API routes
const express = require('express');
const router = express.Router();
const AdminSettings = require('../models/AdminSettings');

// Update default message
router.post('/update-message', async (req, res) => {
  try {
    const { defaultMessage } = req.body;
    let settings = await AdminSettings.findOne();
    if (!settings) {
      settings = new AdminSettings({ defaultMessage });
    } else {
      settings.defaultMessage = defaultMessage;
    }
    await settings.save();
    res.json({ message: 'Message updated successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

module.exports = router;


// models/User.js - User schema
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  name: String,
  whatsappNumber: String,
  email: String,
});

module.exports = mongoose.model('User', UserSchema);


// models/AdminSettings.js - Admin settings schema
const mongoose = require('mongoose');

const AdminSettingsSchema = new mongoose.Schema({
  defaultMessage: String,
});

module.exports = mongoose.model('AdminSettings', AdminSettingsSchema);


// utils/emailSender.js - Sends daily VCF emails
const nodemailer = require('nodemailer');
const User = require('../models/User');
const AdminSettings = require('../models/AdminSettings');
const { generateVCF } = require('./vcfGenerator');
const fs = require('fs');

const sendDailyEmails = async () => {
  try {
    const users = await User.find();
    const settings = await AdminSettings.findOne();
    const vcfFilePath = await generateVCF();
    
    if (!users.length || !vcfFilePath) return;
    
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });
    
    for (const user of users) {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: user.email,
        subject: 'Daily Updated Contacts',
        text: settings?.defaultMessage || 'Here is your updated contact list.',
        attachments: [{ filename: 'contacts.vcf', path: vcfFilePath }]
      };
      
      await transporter.sendMail(mailOptions);
    }
    console.log('Daily emails sent successfully');
  } catch (error) {
    console.error('Error sending emails:', error);
  }
};

module.exports = { sendDailyEmails };


// utils/vcfGenerator.js - Generates VCF file
const fs = require('fs');
const User = require('../models/User');

const generateVCF = async () => {
  try {
    const users = await User.find();
    let vcfContent = '';
    
    users.forEach(user => {
      vcfContent += `BEGIN:VCARD\nVERSION:3.0\nFN:${user.name}\nTEL:${user.whatsappNumber}\nEMAIL:${user.email}\nEND:VCARD\n`;
    });
    
    const filePath = './contacts.vcf';
    fs.writeFileSync(filePath, vcfContent);
    return filePath;
  } catch (error) {
    console.error('Error generating VCF:', error);
    return null;
  }
};

module.exports = { generateVCF };
